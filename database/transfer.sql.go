// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transfer.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getTransfer = `-- name: GetTransfer :one
select id, from_account_id, to_account_id, amount, created_at from transfers
where id = $1
limit 1
`

func (q *Queries) GetTransfer(ctx context.Context, id uuid.UUID) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const transfer = `-- name: Transfer :one

INSERT INTO transfers (from_account_id, to_account_id, amount)
values($1, $2, $3)
returning id, from_account_id, to_account_id, amount, created_at
`

type TransferParams struct {
	FromAccountID uuid.UUID `json:"from_account_id"`
	ToAccountID   uuid.UUID `json:"to_account_id"`
	Amount        int64     `json:"amount"`
}

// TABLE transfers (
//
//	id uuid PRIMARY KEY DEFAULT (gen_random_uuid()),
//	from_account_id uuid NOT NULL,
//	to_account_id uuid NOT NULL,
//	amount BIGINT NOT NULL,
//	created_at TIMESTAMP NOT NULL DEFAULT (now())
//
// );
func (q *Queries) Transfer(ctx context.Context, arg TransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, transfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
